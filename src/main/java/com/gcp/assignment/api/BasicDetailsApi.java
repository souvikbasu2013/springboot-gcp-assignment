/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.gcp.assignment.api;

import com.gcp.assignment.model.BasicDetails;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-15T17:08:07.614018800+05:30[Asia/Calcutta]")
@Validated
public interface BasicDetailsApi {

    @Operation(summary = "Add a new basic details to the application", description = "Add a new basic details to the application", tags={ "basic-details" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BasicDetails.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/basic-details/create",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BasicDetails> addBasicDetails(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new basic details in the application", required=true, schema=@Schema()) @Valid @RequestBody BasicDetails body);


    @Operation(summary = "Deletes a basic details", description = "delete a basic details", tags={ "basic-details" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful deletion"),
        
        @ApiResponse(responseCode = "400", description = "Invalid value") })
    @RequestMapping(value = "/basic-details/delete/{partnerKey}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBasicDetails(@Parameter(in = ParameterIn.PATH, description = "ID of basic details to return", required=true, schema=@Schema()) @PathVariable("partnerKey") String partnerKey);


    @Operation(summary = "Find basic details by ID", description = "Returns a single basic details", tags={ "basic-details" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BasicDetails.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "basic details not found") })
    @RequestMapping(value = "/basic-details/get/{partnerKey}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BasicDetails> getBasicDetailsById(@Parameter(in = ParameterIn.PATH, description = "ID of basic details to return", required=true, schema=@Schema()) @PathVariable("partnerKey") String partnerKey);


    @Operation(summary = "Update an existing basic details", description = "Update an existing basic details by Id", tags={ "basic-details" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BasicDetails.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "basic details not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/basic-details/update/{partnerKey}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<BasicDetails> updateBasicDetails(@Parameter(in = ParameterIn.PATH, description = "ID of basic details to return", required=true, schema=@Schema()) @PathVariable("partnerKey") String partnerKey, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existent basic details in the application", required=true, schema=@Schema()) @Valid @RequestBody BasicDetails body);

}

